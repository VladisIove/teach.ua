# Generated by Django 2.2.3 on 2019-07-11 11:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=120, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=120, null=True, verbose_name='Фамилия')),
                ('email', models.EmailField(max_length=120, unique=True, verbose_name='Email')),
                ('valid_announcement', models.BooleanField(default=False, verbose_name='Показывать ваш профиль другим пользователям?')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('mobile_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер телефона')),
                ('img', models.ImageField(default='../static/img/noimage.jpg', upload_to='', verbose_name='Фотография профиля')),
                ('about', models.TextField(max_length=500, verbose_name='О вас:')),
                ('age', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Возраст')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Город')),
                ('price_per_hource', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Цена в час')),
                ('type_persone', models.CharField(choices=[('T', 'teacher'), ('S', 'student')], default='S', max_length=1)),
                ('skype', models.CharField(blank=True, max_length=120, null=True, verbose_name='Skype')),
                ('telegram', models.CharField(blank=True, max_length=120, null=True, verbose_name='Telegram')),
                ('viber', models.CharField(blank=True, max_length=120, null=True, verbose_name='Viber')),
                ('instagram', models.CharField(blank=True, max_length=120, null=True, verbose_name='Instagram')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('last_change', models.DateTimeField(blank=True, null=True)),
                ('start_subscription', models.DateTimeField(blank=True, null=True)),
                ('end_subscription', models.DateTimeField(blank=True, null=True)),
                ('subscription', models.BooleanField(default=False, verbose_name='Подписка')),
            ],
            options={
                'ordering': ['name', 'subscription'],
            },
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_name', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='TypeLesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_lesson', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raiting', models.PositiveSmallIntegerField(null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner_like', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=500)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner_comment', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='comment',
            field=models.ManyToManyField(blank=True, related_name='comment', to='user.Comment'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='like',
            field=models.ManyToManyField(blank=True, related_name='like', to='user.Like'),
        ),
        migrations.AddField(
            model_name='user',
            name='skill',
            field=models.ManyToManyField(blank=True, related_name='skill', to='user.Skill', verbose_name='Предмет'),
        ),
        migrations.AddField(
            model_name='user',
            name='type_lesson',
            field=models.ManyToManyField(blank=True, related_name='typelesson', to='user.TypeLesson', verbose_name='Вид преподования'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
